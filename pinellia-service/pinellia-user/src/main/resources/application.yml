
# 端口
server:
  port: 6061

# 服务名称
spring:
  application:
    name: user-service

  cloud:
    # nacos
    nacos:
      discovery:
        server-addr: 127.0.0.1:8848
  # 数据库
  datasource:
    driver-class-name: com.p6spy.engine.spy.P6SpyDriver
    url: jdbc:p6spy:mysql://47.100.93.25:13306/pinellia?useUnicode=true&useSSL=false&characterEncoding=utf8&allowPublicKeyRetrieval=true
    username: root
    password: aini1314liliqun

  security:
    user:
      name: admin
      password: 123456

  # kafka设置
  kafka:
    # 用于建立初始连接到kafka集群的"主机:端口对"配置列表，host1:port1,host2:port2
    bootstrap-servers: 47.100.93.25:9092
    # 生产者
    producer:
      # 若设置大于0的值，则客户端会将发送失败的记录重新发送，尽管这些记录有可能是暂时性的错误
      retries: 0
      # 当将多个记录被发送到同一个分区时， Producer 将尝试将记录组合到更少的请求中。这有助于提升客户端和服务器端的性能。这个配置控制一个批次的默认大小（以字节为单位）
      batch-size: 16384
      # Producer 用来缓冲等待被发送到服务器的记录的总字节数。如果记录发送的速度比发送到服务器的速度快， Producer 就会阻塞，如果阻塞的时间超过 max.block.ms 配置的时长，则会抛出一个异常。
      buffer-memory: 33554432
      # 关键字的序列化类
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 值的序列化类
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      properties:
        # 如果设置linger.ms=5 ，则发送的请求会减少并降低部分负载，但同时会增加5毫秒的延迟。
        linger.ms: 1
      # 发出请求时传递给服务器的 ID 字符串。这样做的目的是为了在服务端的请求日志中能够通过逻辑应用名称来跟踪请求的来源，而不是只能通过IP和端口号跟进。
      # client-id: dept

    # 消费者
    consumer:
      enable-auto-commit: false
      auto-commit-interval: 100ms
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # 指定默认消费者group id
      properties:
        session.timeout.ms: 15000
    listener:
      missing-topics-fatal: false

# flowable配置
flowable:
  labelFontName: 宋体
  activityFontName: 宋体
  annotationFontName: 宋体
  rest:
    app:
      authentication-mode: verify-privilege
  process:
    definition-cache-limit: 10
  idm:
    app:
      admin:
        password: test
        user-id: admin
        first-name: admin
        last-name: admin

  common:
    app:
      role-prefix:
      idm-url: http://localhost:${server.port}/${spring.application.name}/idm

  modeler:
    app:
      rest-enabled: true
  admin:
    app:
      security:
        encryption:
          credentials-secret-spec: 9FGl73ngxcOoJvmL
          credentials-i-v-spec: j8kdO2hejA9lKmm6
      server-config:
        app:
          context-root: ${spring.application.name}
          password: test
          server-address: http://localhost
          user-name: admin
          port: ${server.port}
          rest-root: app-api
          name: Flowable App app
          description: Flowable App REST config
        process:
          context-root: ${spring.application.name}
          server-address: http://localhost
          password: test
          user-name: admin
          rest-root: process-api
          port: ${server.port}
          name: Flowable Process app
          description: Flowable Process REST config
        form:
          context-root: ${spring.application.name}
          server-address: http://localhost
          password: test
          user-name: admin
          port: ${server.port}
          rest-root: form-api
          name: Flowable Form app
          description: Flowable Form REST config
        dmn:
          context-root: ${spring.application.name}
          server-address: http://localhost
          password: test
          user-name: admin
          port: ${server.port}
          rest-root: dmn-api
          name: Flowable DMN app
          description: Flowable DMN REST config
        cmmn:
          context-root: ${spring.application.name}
          password: test
          server-address: http://localhost
          user-name: admin
          port: ${server.port}
          rest-root: cmmn-api
          name: Flowable CMMN app
          description: Flowable CMMN REST config
        content:
          context-root: ${spring.application.name}
          server-address: http://localhost
          password: test
          user-name: admin
          rest-root: content-api
          port: ${server.port}
          name: Flowable Content app
          description: Flowable Content REST config
  database-schema-update: true
  async-executor-activate: false
  task:
    app:
      kafka-enabled: true

# mybatis-plus的配置
mybatis-plus:
  type-aliases-package: com.ivan.pinellia.entity
  mapper-locations: classpath:/xml/*Mapper.xml


# 端点配置
management:
  endpoints:
    web:
      exposure:
        include: "*"

  endpoint:
    health:
      show-details: always